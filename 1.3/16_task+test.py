""" Шопоголики
Оксана -- шопоголик. Она постоянно выискивает магазины, где предлагаются различные скидки, и совершает на них опустошающие набеги.
Недавно Оксана нашла отличный маркет, где предлагается соблазнительный сервис: если покупаются три предмета, то третий (самый дешёвый) можно получить бесплатно. Например, купив три предмета за 400, 300 и 250 долларов, Оксана заплатит всего 700 долларов, так как третий, самый дешёвый, получит бесплатно.
Если за один раз покупается больше трёх предметов, то количество бесплатных покупок равно общему числу предметов, делённому нацело на три. Например, при покупке 7 и 8 предметов, два предмета из них (самые дешёвые) Оксана получает бесплатно.
Однако если разбивать такие "длинные" приобретения на более короткие, можно получить ощутимо большую выгоду.
Например, Оксана купила разом семь предметов: 400, 350, 300, 250, 200, 150 и 100 долларов, из которых два самых дешёвых (150 и 100) достаются бесплатно. Однако если бы она сперва купила три предмета 400, 350 и 300, потом три 250, 200 и 150, и потом последний за 100, то бесплатными для неё стали бы товары по 300 и 150 долларов.
Разработайте для Оксаны стратегию получения максимальной скидки, когда известен весь перечень товаров (цены на них следуют в случайном порядке).
Функция
int MaximumDiscount(int N, int [] price)
получает на вход количество предметов N и список их цен. Возвращает она максимально возможную величину скидки.

Рефлексируем:
    Хочу сразу сказать, что мы просто отсортируем весь список, п"""  """осчитаем общее количество элемнтов, если они не делятся на три, то убираем самый маленький элемент и так пока наши покупки не будут делится на три, 
затем мы складываем каждый третий элемент и выводим его.
Итак я выполнил задание верно, но при проверки ИИ - он сказал, что у меня ошибка, я стал разбираться  с ним подробнее и выяснилось, что ошибок у меня и нет, просто при подсчете большого списка будет более длинный расчет(за счет удаления элементов) """
""" def MaximumDiscount( N, price):
    price.sort(reverse = True)
    count_len = len(price)
    result = 0
    while len(price) % 3 != 0:
        price.pop()
    result = sum(price[2::3])
    print(price)
    print(count_len)
    return result """

def MaximumDiscount( N, price):
    price.sort(reverse = True)
    result = 0
    for i in range(2,N,3):
        result +=price[i]
    return result


print(MaximumDiscount(5,[80,90,100,70, 50])) # 80
print(MaximumDiscount(7,[80,90,100,70, 50, 60,40])) # 130
print(MaximumDiscount(6, [400, 200, 150, 300, 100, 50]))  # 250 """
print(MaximumDiscount(4, [1000, 500, 200, 100]))  # 200
print(MaximumDiscount(8, [50,30,40,20,10,60,80,70]))  # 100 """
print(MaximumDiscount(9, [10,20,30,40,50,60,70,80,90]))  # 150
print(MaximumDiscount(2, [100,50]))  # 0
print(MaximumDiscount(1, [500]))  # 0
print(MaximumDiscount(12, [i*10 for i in range(12,0,-1)]))  # 210
print(MaximumDiscount(3, [0, 0, 0]))  # 0
print(MaximumDiscount(6, [0]*6))      # 0
print(MaximumDiscount(0, [0]))        # 0 (нельзя сформировать тройку)
