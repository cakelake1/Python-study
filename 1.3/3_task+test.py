#Министерство обороны готовит группу элитных десантников, которые должны в кратчайший срок захватить тренировочный полигон "Квадраты". Территория Квадратов представляет собой прямоугольник из NxM квадратных областей, где каждая область имеет координаты 1 .. N , 1 .. M.

#Десантники в день 1 высаживаются в L областей, заданных их координатами (x1, y1), (x2,y2), ... , (xl, yl), которые считаются захваченными. На следующий день (день 2) они захватывают все соседние области, прилегающие к этим областям с четырёх сторон (по вертикали и горизонтали), и далее каждый следующий день этот процесс повторяется, пока не будут взяты под контроль все области без исключения.

#Генштаб требует точный план захвата плацдарма "Квадраты" -- на какой день он будет полностью контролироваться десантниками.

#Например:
#В первый день под контроль взяты две области (заштрихованы); во второй -- 8 областей (две с первого дня, сплошные синие, и шесть в текущий день, заштрихованы).
#В третий день (результирующее значение -- 3) вся территория тренировочного плацдарма оказывается под контролем десантников.

#Функция

#int ConquestCampaign(int N, int M, int L, int [] battalion) 
#получает первыми двумя параметрами размер плацдарма "Квадраты" NxM, а battalion содержит массив из L*2 целых чисел (L >= 1) с индексацией с нуля, в котором каждый чётный (с чётным индексом) элемент содержит очередную координату области высадки по первому измерению N, а каждый нечётный (с нечётным индексом) элемент содержит очередную координату области высадки по второму измерению M.
#Не исключено, что в связи с неразберихой в командовании координаты областей высадки могут дублироваться.
#На примере с картинки параметры будут такими: N = 3, M = 4, L = 2, battalion = [2,2, 3,4]

#Возвращает функция день, начиная с 1, когда все области будут взяты под контроль.

def ConquestCampaign(N, M, L, battalion):
    captured = [] #завоеванные клетки общее
    today_capture = [] # завоеванные в текущий день
    for i in range(0, 2 * L, 2):
        x = battalion[i] - 1
        y = battalion[i + 1] - 1
        if 0 <= x < N and 0 <= y < M and (x, y) not in captured:
            captured.append((x, y))
            today_capture.append((x, y))
    #if not captured:
        #return 0  # Если нет стартовых клеток
    days = 0
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # Вверх, вниз, влево, вправо

    while today_capture:
        days = days + 1
        nextday_capture = []

        for x, y in today_capture:
            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
                nx = x + dx
                ny = y + dy
                if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in captured:
                    captured.append((nx, ny))
                    nextday_capture.append((nx, ny))

        today_capture = nextday_capture

    return days

def run_tests():
    print("Запуск тестов...\n")
    
    # Тест 1: Маленькая сетка 3x3 с 2 стартовыми точками
    N, M, L = 3, 3, 2
    battalion = [1, 1, 3, 3]
    result = ConquestCampaign(N, M, L, battalion)
    print(f"Тест 1 (3x3 сетка, старт (1,1) и (3,3)): {result} дней")
    print("Ожидаемый результат: 3 дня (центр завоёван на 3 день)\n")
    
    # Тест 2: Одна стартовая точка в центре
    N, M, L = 5, 5, 1
    battalion = [3, 3]
    result = ConquestCampaign(N, M, L, battalion)
    print(f"Тест 2 (5x5 сетка, старт (3,3)): {result} дней")
    print("Ожидаемый результат: 4 дня\n")
    
    # Тест 3: Все клетки сразу завоёваны
    N, M, L = 2, 2, 4
    battalion = [1, 1, 1, 2, 2, 1, 2, 2]
    result = ConquestCampaign(N, M, L, battalion)
    print(f"Тест 3 (2x2 сетка, все точки старта): {result} дней")
    print("Ожидаемый результат: 1 день\n")
    
    # Тест 4: Граничный случай - одна клетка
    N, M, L = 1, 1, 1
    battalion = [1, 1]
    result = ConquestCampaign(N, M, L, battalion)
    print(f"Тест 4 (1x1 сетка): {result} дней")
    print("Ожидаемый результат: 1 день\n")
    
    # Тест 5: Большая сетка
    N, M, L = 100, 100, 1
    battalion = [50, 50]
    result = ConquestCampaign(N, M, L, battalion)
    print(f"Тест 5 (100x100 сетка, старт в центре): {result} дней")
    print("Ожидаемый результат: 99 дней\n")
    
    # Тест 6: Некорректные координаты
    N, M, L = 3, 3, 2
    battalion = [1, 1, 5, 5]
    result = ConquestCampaign(N, M, L, battalion)
    print(f"Тест 6 (3x3 сетка с неверными координатами): {result} дней")
    print("Ожидаемый результат: 3 дня (игнорируется (5,5))\n")
    
    # Тест 7: Нет стартовых клеток
    N, M, L = 3, 3, 0
    battalion = []
    result = ConquestCampaign(N, M, L, battalion)
    print(f"Тест 7 (нет стартовых клеток): {result} дней")
    print("Ожидаемый результат: 0 дней\n")

    print("Все тесты завершены!")

# Запускаем тесты
run_tests()