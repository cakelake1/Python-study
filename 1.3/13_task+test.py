""" Сигналы НЛО
Британские учёные перехватили трафик переговоров двух НЛО, шпионящих за Землёй. Как выяснилось, сигналы первой НЛО передаются в восьмеричной системе счисления, а сигналы второй НЛО передаются в шестнадцатеричной системе счисления.
Для быстрой расшифровки их переговоры надо представить в более привычной землянам десятичной системе счисления. Срочно требуется конвертор для разных систем счисления.
Функция
int [] UFO(int N, int [] data, bool octal)
получает на вход длину N цифровой записи трафика, сам трафик (последовательность положительных чисел) в массиве data, и флажок octal, который задаёт систему счисления входных данных: восьмеричная если octal = true, и шестнадцатеричная в противном случае.
Если числа подаются в восьмеричной системе счисления, гарантируется, что в них не будет цифр 8 и 9.
Функция возвращает массив длины N, содержащий исходные числа, преобразованные в десятичную систему счисления.
Например, если на вход подаётся массив из двух чисел 1234,1777 с флажком octal = false, то результат будет 4660,6007.
А если флажок для данного массива будет true, то результат будет 668,1023.
 
Рефлексия:
    Задание не кажется сложным, возможно есть подводные камни помимо того, что только строковые значения можно переводить в десятичный литерал.
    Значит необходимо из массива вытащить все значения в строковом виде или перевести их в строки., затем строковое значение перевести в десятичную систему  исчисления  и добавить результат в конечный массив.
 
 """
""" def UFO(N, data, octal):
    data_strings = [str(x) for x in data]
    result = []
    while octal is True:
        for i in data_strings:
            oct_number = int(i,8)
            result.append(oct_number)
        return result
    while octal is False:
        for j in data_strings:
            hex_number = int(j,16)
            result.append(hex_number)
        return result """

def UFO(N, data, octal):
    result = []
    while octal is True:
        for i in data:
            oct_number = int(str(i),8)
            result.append(oct_number)
        return result  
    while octal is False:
        for j in data:
            hex_number = int(str(j),16)
            result.append(hex_number)
        return result                               

print(UFO(2,[1234, 1777], True))
print(UFO(2,[1234, 1777], False))