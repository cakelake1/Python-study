""" Оптимизация беспилотного трафика
Яндекс выпускает на улицы тысячи беспилотных автомобилей, и теперь появляется отличная возможность оптимизации трафика на дорогах. Прежде всего требуется точно оценить время прибытия машины в место назначения.
На дороге автомобиль постоянно встречает светофоры, которые горят либо зелёным, либо красным. Время горения зелёного и красного света задаётся в секундах. Цикл переключения цветов повторяется бесконечно и начинается с красного цвета.
Так как скорость автомобиля известна, положения светофоров на дороге определяются временем, которое требуется, чтобы доехать до этого светофора из начала дороги при условии, что все предыдущие светофоры горят зелёным.
Каждый светофор также характеризуется временем горения красного и зелёного цвета.
Задача -- определить, за какое время автомобиль доберётся до конца дороги.
Например, имеется дорога длиной 10 единиц времени. Первый светофор расположен на отметке 3 единицы времени и характеризуется циклом 5 красный 5 зелёный. Второй светофор расположен на отметке 5, и время показа красного и зелёного для него 2 и 2.
Автомобиль стартует, через 3 единицы добирается до первого светофора, на котором горит красный. Он горит 5 единиц, то есть движение начинается с 5-го момента.
Через две единицы автомобиль добирается до второго светофора -- это абсолютный момент 7. В этот момент на светофоре горит зелёный, и автомобиль проезжает его без остановки. От второго светофора до конца дороги остаётся ещё 5 моментов, таким образом суммарное время автомобиля в пути равно 12 (7 + 5).
Функция
int Unmanned(int L, int N, int [][3] track)
получает на вход длину L дороги, количество светофоров на ней N, и описание самой дороги, где каждый элемент состоит из трёх значений: момент времени относительно начала дороги (когда в него прибудет автомобиль по свободной дороге), время показа красного света и время показа зелёного цвета.
Для примера выше параметры функции Unmanned() будут такими: 10, 2, [ [3,5,5], [5,2,2] ]
Функция возвращает реальное время, требуемое для преодоления дороги.
как постить решение
Рефлексия:
    Задача сначала показалась какой то очень сложной, но немного потренировав мозги в питон туторе, оказывается, что нужно всего то лишь построить логику и разобраться со временем
    Сначала я хотел залезть в матрицу и подобрать удобную формулу для корректного расчета, но это у меня не получилось, т.е. для определенной дороги еще можно подобрать, но если значения поменяются - я сяду в лужу
    ЗАтем я решил, что нужно ввести переменные для подсчета текущего времени в пути, стартового времени, времени работы светофоров 
    Самое сложное здесь было понять, как вычислить текущую позицию времени, относительно светофора. """
""" def Unmanned(L, N, track):
    cur_time = 0 # текущее время
    prev_time = 0 # предыдушее время
    for position,r,g in track: # для позиции светофора, красного и зеленого сигнала
        cur_time += position - prev_time # определяем текушее время
        prev_time = position # теперь текущая позиция- предыдущая
        traffic_lights = r + g # рассчитывается цикл световора
        time = cur_time % traffic_lights if traffic_lights > 0 else 0 # позиция в текущем цикле, заодно проверка на неработающие светофоры
        if time < r: # Если позиция меньше длительности красного светофора
            cur_time += r - time #  текущее время со временем красного световора минус текушая фаза
    result = L - prev_time + cur_time   # выходим из цикла, считаем общее время
    return result """
def Unmanned(L, N, track):
    cur_time = 0 
    prev_time = 0 
    for position,r,g in track:
        if position > L:
            continue
        cur_time += position - prev_time 
        prev_time = position 
        traffic_lights = r + g
        if traffic_lights ==0:
            continue 
        time = cur_time % traffic_lights 
        if time < r: 
            cur_time += r - time 
    result = L - prev_time + cur_time   
    return result
print(Unmanned(10,2,[(3,5,5),(5,2,2)])) # 12
print(Unmanned(100,0,[(0,0,0)])) # 100
print(Unmanned(100,1,[(50,30,70)])) # 100
print(Unmanned(100,1,[(40,20,10)]))# 110
print(Unmanned(200,2,[(50,60,40),(150,30,10)]))# 240
print(Unmanned(80,1,[(80,25,5)]))# 85
print(Unmanned(100,2,[(30,15,15),(60,10,20)])) # 115
print(Unmanned(20,3,[(3,5,5),(7,4,2),(15,3,1)]))# 24
print(Unmanned(50,4,[(10,15,5),(20,10,20),(35,20,10),(45,5,25)]))# 70
print(Unmanned(10,2,[(11,5,5),(15,2,2)]))# 10
