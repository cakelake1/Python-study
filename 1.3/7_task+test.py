# Конкурент Google
# Ваш стартап получил миллионные инвестиции на создание нового поискового движка.
# Требуется срочно реализовать базовый алгоритм поиска, чтобы отчитаться перед инвесторами.
# На вход алгоритма поступает текстовая строка достаточно большой длины. Все слова в ней разделены ровно одним пробелом. Алгоритм обрабатывает строку в два шага:
# 1) строка разбивается на набор строк через выравнивание по заданной ширине.
# Разбивать строку разрешается только в местах пробелов, слова надо переносить целиком, если они меньше или равны длине разбивки. Например, имеется строка
# 1) строка разбивается на набор строк через выравнивание по заданной ширине.
# и задана ширина разбивки 12. 
# Тогда на первом шаге будет получена такая последовательность строк:
# 1) строка 
# разбивается
# на набор
# строк через
# выравнивание
# по заданной
# ширине.
# Пустые строки в такой разбивке полностью исключаются. Если ширина разбивки меньше какого-то слова, то это слово разбивается на несколько (с переносом на следующую строку).
# 2) Каждая строка проверяется на наличие в ней заданного целого слова (ограниченного либо пробелами, либо началом/концом строки).
# Результат работы алгоритма -- последовательность целых чисел 1 или 0, которые показывают, имеется ли в соответствующей строке запрошенное слово.
# Например, для слова "строк" результат будет таким: 0 0 0 1 0 0 0
# Функция
# int [] WordSearch(int len, string s, string subs) 
# получает параметром len ширину выравнивания, саму строку в параметре s, и проверяемое слово в параметре subs.
# Возвращает функция массив целых чисел, содержащий 1 или 0 (признаки нахождения слова в соответствующей строке).
# как постить решение

# Рефлексия:
# поставил себе цель прочитать 50 стр Лутца(200 - 250с), потому что чувствовал на практике, что не успеваю по заданиям. И какое же приятное ощущение, когда я только изучил тему и она выпадает
# в этом задании, я на верном пути)

# По заданию:
# 1. Переносим слова через "сплит" по пробелам, вроде и ширину параметром можно задать сразу. Вопрос только в ограничении по длине слова и надо ли обработать пустые строки - думаю,
# что надо, но как.. хотя тут слова разделены ровно одним пробелом, т.е. несколько пробелов подряд по заданию быть не может. + перенос большого слова надо проработать.
# 2. Выполнить проверку на заданное слово, ограничение либо пробелом, либо началом\концом строки.
# 3. занести в одномерный массив 1 или 0, если слово есть в строке, между цмфрами пробел в массиве




def WordSearch(width, s, subs):
    words = s.split()
    text_lines = []
    result = []
    current_text_line = ""

    for word in words: # Если слово длинное
        if len(word) > width:
            if current_text_line: 
                text_lines.append(current_text_line)
                current_text_line = ""
            start = 0
            while start < len(word):
                part_word = word[start:start + width]
                text_lines.append(part_word)
                start = start + width
        else: # во всех остальных случаях
            if current_text_line == "":
                current_text_line = word
            else:
                if len(current_text_line) + 1 + len(word) <= width:
                    current_text_line = current_text_line + " " + word
                else:
                    text_lines.append(current_text_line)
                    current_text_line = word
    if current_text_line != "":
        text_lines.append(current_text_line)
    for line in text_lines:
        wd = line.split()
        correct = 0
        for w in wd:
            if w == subs:
                correct = 1
                break
        result.append(correct)

    return result

print(WordSearch(12, "1) строка разбивается на набор строк через выравнивание по заданной ширине.", "строк")) 
# [0, 0, 0, 1, 0, 0, 0]

# Дополнительные тесты
print(WordSearch(5, "hello world", "world"))   # [0, 1]
print(WordSearch(3, "abc def ghi", "abc"))     # [1, 0, 0]
print(WordSearch(10, "a b c d e f g", "c"))    # [0, 1, 0, 0]
print(WordSearch(4, "longword", "long"))   
print(WordSearch(5, "супермегаслово", "мегас"))# Результат: [0, 1, 0] - верно
print(WordSearch(10, "hello world", "world")) # Результат: [0, 1] - верно
print(WordSearch(10, "", "word")) # Результат: [] - верно
print(WordSearch(5, "приветпока мир", "мир"))# Результат: [0, 0, 0, 1] - верно
print(WordSearch(5, "один дватри четыре", "четыре")) # Результат: [0, 0, 0, 0, 0] - верно (слово разбито, целиком не присутствует)
            