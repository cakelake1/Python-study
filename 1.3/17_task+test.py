""" Машинное распознавание паттернов
Олег получил инвестиции на стартап по машинному обучению, и занимается распознаванием закономерностей в тексте.
Его первый продукт будет анализировать текст, преобразованный из изображений точек и звёздочек, которые рисуют первоклассники в тетрадках. Последовательности всегда составлены по общему шаблону, но первоклассники пока часто ошибаются, и забывают поставить точку, рисуют лишнюю звёздочку, и т. п.
На вход программы поступают строки, состоящие из символов "." и "*", всегда начинающиеся и завершающиеся звёздочкой. В них всегда повторяется единый шаблон, например:
*..*..*..*..*..*..*
Такой пример считается корректным.
Однако первоклассники иногда ошибаются, и могут написать такие ошибочные строки:
*..*...*..*..*..*..*
*..*..*..*..*..**..*
Ещё примеры корректных строк:
*
***
*.......*.......*
**
*.*
Функция
bool LineAnalysis(string line)
получает на вход строку для анализа и возвращает логическое true/false, обозначающее корректность строки.
как постить решение
Рефлексируем:
Задачка не из легких, сходу в голову ничего не приходит, кроме того, что нужно подключить логику, где то она точно есть.
ПОпробуем сначала разбить строку на слова по знаку *, получим какой то паттерн, с ним уже дальше можнго работать.
На слова разбили, далее присвааваем шаблон слову, делаем проверку на наличие символов в слове, не запутаться бы с проверками.
Далее самая главная проверка, о том что все лова содержат одинаковые символы и в конце надо убрать лишнии проверки, сделать проверку в начале есть вообще символы, начинаются и заканчиваются на "*"!!!
Избавляеися от отдельной проверки на наличие символов в слове - добавляем ее к проверке в конце на соответствие шаблону
У меня один пример не проходит проверку, Я могу добавить дополнительную проверку на пустое слово, но получится if внутри другого if, что очень не хорошо.
Этот пример я оставлю, он в принципе рабочий.
Я нашёл подсказку в поиске образца через next c генератором нахождения первого непустого сегмента, а такжу улучшенной проверки соответствия all() 
next достаточно простой,а вот all чуть сложнее - сначала мы проверяем, что пустые и не пустые сегменты одинаковые, потом проверяем, что они не смешиваются
Провил на множестве примеров, вроде все корректно """

""" def LineAnalysis(line):
    if len(line) == 0 or line[0] != '*' or line[-1] != '*' :
        return False
    words = line.split('*')[1:-1] # разделяем строку, убираем первый и последний символ 
    print(words)
    sample = None
    for word in words:
        if word: # если слово не пустое
            sample = word
            break
    if sample is None: # если все символы пустые ***, а э
        return True
    for word in words:
        if word and word != sample: # двайоная проверка, если word не пустой и если word не равен sample(шаблону)
            return False
    return True """

def LineAnalysis(line):
    if not line.startswith('*') or not line.endswith('*'):
        return False
    words = line.split('*')[1:-1]
    print(words)
    sample = next((i for i in words if i), None) # первый непустой сегмент как образец
    if sample is None:
        return True
    return(all(i == sample or not i for i in words)  and # все непустые сегменты равны образцу и одинаковы
           (all(not i for i in words) or all(i for i in words))) # пустые и не пустые сегменты не смешиваются

    
print(LineAnalysis("*..*"))    # True
""" print(LineAnalysis("*..*..*..*"))    # True
print(LineAnalysis("*..*...*..*"))   # False
print(LineAnalysis("*.**.*"))        # False
print(LineAnalysis("*.......*"))     # True
print(LineAnalysis("**"))            # True
print(LineAnalysis("*"))             # True
print(LineAnalysis("*..*..*"))     # True (шаблон "..")
print(LineAnalysis("*...*...*"))   # True (шаблон "...")
print(LineAnalysis("*.*.*"))       # True (шаблон ".")
print(LineAnalysis("**"))          # True (все сегменты пустые)
print(LineAnalysis("*"))           # True (только одна звезда)
print(LineAnalysis("*..*.*"))      # False (разные шаблоны ".." и ".")
print(LineAnalysis("abc"))         # False (не начинается на *)
print(LineAnalysis("*...*..*"))    # False (шаблоны "..." и "..")
print(LineAnalysis("*"))             # True (минимальный случай)
print(LineAnalysis("**"))            # True (только звёзды)
print(LineAnalysis("***"))           # True (только звёзды)
print(LineAnalysis("*.*"))           # True (один сегмент ".")
print(LineAnalysis("*..*"))          # True (один сегмент "..")
print(LineAnalysis("*...*"))         # True (один сегмент "...")
print(LineAnalysis("*.*.*"))         # True (два сегмента ".")
print(LineAnalysis("*..*..*"))       # True (два сегмента "..")
print(LineAnalysis("*...*...*"))     # True (два сегмента "...")
print(LineAnalysis("*.......*"))     # True (один длинный сегмент)
print(LineAnalysis("*.*.*.*.*"))     # True (много сегментов ".")
print(LineAnalysis("*..*..*..*"))    # True (много сегментов "..")

# Ошибочные случаи (False)
print(LineAnalysis(""))              # False (пустая строка)
print(LineAnalysis("a"))             # False (не звёздочка)
print(LineAnalysis("**a"))           # False (не звёздочка в конце)
print(LineAnalysis("a**"))           # False (не звёздочка в начале)
print(LineAnalysis("*a*"))           # False (запрещённый символ)
print(LineAnalysis("*.*a*"))         # False (запрещённый символ)
print(LineAnalysis("*.."))           # False (нет конечной звёздочки)
print(LineAnalysis("..*"))           # False (нет начальной звёздочки)
print(LineAnalysis("*.*."))          # False (нет конечной звёздочки)
print(LineAnalysis(".*.*"))          # False (нет начальной звёздочки)

# Смешанные случаи с ошибками
print(LineAnalysis("*.**.*"))        # False (смешанные пустые/непустые)
print(LineAnalysis("*..*.*..*"))     # False (разные сегменты ".." и ".")
print(LineAnalysis("*...*..*...*"))  # False (разные сегменты)
print(LineAnalysis("*..*...*..*"))   # False (разные сегменты)
print(LineAnalysis("*.*..*..*"))     # False (разные сегменты)
print(LineAnalysis("*..*..**..*"))   # False (две звёздочки подряд)
print(LineAnalysis("***.**"))        # False (разные сегменты)
print(LineAnalysis("*.*.**"))        # False (разные сегменты)
print(LineAnalysis("*.**.**"))       # False (разные сегменты)
print(LineAnalysis("*...**...*"))    # False (две звёздочки подряд)

# Граничные случаи
print(LineAnalysis("****************"))  # True (только звёзды)
print(LineAnalysis("*..................*")) # True (один длинный сегмент)
print(LineAnalysis("*.*.*.*.*.*.*.*.*")) # True (много одинаковых сегментов)
print(LineAnalysis("*..*..*..*..*..*"))  # True (много одинаковых сегментов)
print(LineAnalysis("*...*...*...*...*")) # True (много одинаковых сегментов)
print(LineAnalysis("*....*....*....*"))  # True (много одинаковых сегментов)

# Специальные тесты
print(LineAnalysis("*.*"))           # True (минимальный непустой)
print(LineAnalysis("*..*"))          # True (минимальный непустой)
print(LineAnalysis("*...*"))         # True (минимальный непустой)
print(LineAnalysis("*....*"))        # True (минимальный непустой)
print(LineAnalysis("*.****"))        # False (разные сегменты)
print(LineAnalysis("****.*"))        # False (разные сегменты) """