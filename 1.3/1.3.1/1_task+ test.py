""" Рейтинг занимающихся   ::   NickDor, вы великолепны!
news 15.10 :: Выбираем правильный путь для карьеры
1. Белые Ходоки
Эту задачку вы уже решали на предыдущем курсе "28 задач", освежите её решение, а затем посмотрите правильный вариант.
Если я забыл вам дать предварительные задачки по рекурсии, напомните мне пожалуйста.
Также предварительно обязательно изучите материал по оценке сложности алгоритмов, будет далее нужен на этом и последующих курсах.
Белые Ходоки снова готовят свою армию мертвецов для очередного штурма Стены. Но они подкрадываются к ней хитростью, стараясь незаметно затесаться среди мирных жителей окрестных деревень.
Для этого Ходоки принимают обличье крестьян, однако становятся различимыми, когда группируются в тройки -- температура вокруг них при этом понижается на 10 градусов.
Вы возглавляете Железный Трон Семи Королевств и посылаете разведчиков выявить всех врагов.
Дайте им подробные инструкции по определению вражеских сил в каждой деревне.
Каждая деревня задаётся ASCII-строкой (возможно, пустой).
В ней могут быть числа (жители, разбредшиется по полям), но только из одного символа (цифры от 0 до 9). То есть подряд несколько цифр не могут следовать.
Если в такой строке между каждой парой чисел (цифр), сумма которых равна 10, насчитываются ровно три Ходока (символ "="), значит, Ходоки успешно выявлены.
Решение засчитывается на 100%, если реализовано за O(N).
Функция
bool white_walkers(string village) 
получает параметром village строку, описывающую одну деревню, и возвращает true, если в ней выявляются все Ходоки.
Например:
"axxb6===4xaf5===eee5" => true
"5==ooooooo=5=5" => false
"abc=7==hdjs=3gg1=======5" => true
"aaS=8" => false
"9===1===9===1===9" => true
Ссыылку на ваше решение на гитхабе введите в форму ниже:
Ваше решение
После нажатия на ОТПРАВИТЬ вы будете автоматически перенаправлены к следующему занятию! """

def white_walkers(village):
    cu_sum_prefix = [0] * (len(village) + 1)
    list_digits = []
    for i, char in enumerate(village):
        cu_sum_prefix[i+1] = cu_sum_prefix[i] + (char == '=')
        if char.isdigit():
            list_digits.append((i, int(char)))
    if len(list_digits) < 2:
        return False
    correct_pairs = []
    for i in range(len(list_digits) - 1):
        index_1, number_1 = list_digits[i]
        index_2, number_2 = list_digits[i+1]
        count = cu_sum_prefix[index_2] - cu_sum_prefix[index_1 + 1]
        if number_1 + number_2 == 10:
            correct_pairs.append(count == 3)
    return bool(correct_pairs) and all(correct_pairs)

test_cases = [
    ("axxb6===4xaf5===eee5", True),
    ("5==ooooooo=5=5", False),
    ("abc=7==hdjs=3gg1=======5", True),
    ("aaS=8", False),
    ("9===1===9===1===9", True),
    ("", False),
    ("abc", False),
    ("1=2", False),
    ("5====5", False),
    ("5==5", False)
]
for village, expected in test_cases:
    result = white_walkers(village)
    print(f'"{village}" -> {result} (expected: {expected}) {"✓" if result == expected else "✗"}')
        