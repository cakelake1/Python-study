""" ﻿

 




Рейтинг занимающихся   ::   NickDor, вы великолепны!

news 27.10 :: Твоя карьера -- это бесконечная игра


4. Cyberpunk 203x: 1991


Мир. Итальянская корпорация Biotechnica разрабатывает новое химическое топливо CHOOH2 (которое на уличном жаргоне называют "чох" и используют как спиртное) -- из собственной запатентованной генетически модифицированной пшеницы.
В Стэнфордском исследовательском центре создано искусственное мышечное волокно.
Европейское космическое агентство запускает аппарат Hermes.
3 ноября. Хирам Калакари, генерал панамской армии, приводит на митинг протеста более чем сто тысяч панамцев к центральному шлюзу Панамского канала, чтобы выразить протест против режима Норьеги и сокращения американской помощи их экономике.
6 ноября. Правительство Норьеги вторгается в этот район воздушными и наземными атаками; количество жертв составило более десяти тысяч человек.

США. Первая аркология (сооружения экологической экологии) построена на руинах Джерси-Сити. 16 гигантских "Аркосов" начали возводиться в течение следующих лет, вплоть до краха в 1997 году, после чего огромные сооружения остаются наполовину завершёнными и заполняются сквоттерами и бездомными.

НеоСССР. Режим Горборёва проводит последнюю чистку старых сторонников жёсткой линии.
Эстония, Латвия и Литва первыми получают независимость.

Помогите Стэнфорду научить искусственные мускулы быстро сжиматься и разжиматься.

На вход искусственной мышце подаётся иммутабельный список внешних сигналов -- случайных целых чисел в диапазоне от 1 до 32000. Ваша задача -- написать функцию, которая быстро найдёт все повторяющиеся числа в этом массиве (ключевые точки мышцы, на которые надо воздействовать). Но пока чипы, применяемые в искусственных мускулах, очень слабы, их память составляет всего восемь килобайтов.

У вас в распоряжении для обработки сигналов имеется только один локальный буфер (массив) из 8192 байтов (именно байтов, а не целых/int...).

Подсказка: изучите самостоятельно, как включать/выключать конкретный бит в массиве байтов.


Функция

int artificial_muscle_fibers(int[] arr) 
получает параметром входной массив из целых чисел в диапазоне от 1 до 32000, и должна вернуть количество одинаковых чисел в этом массиве (многократное повторение одного числа считается как одно повторение). Решение засчитывается за 100%, если работает за O(N) и использует только один локальный массив из 8192 байтов.
Например:

artificial_muscle_fibers([1,2,3,4,5]) = 0
artificial_muscle_fibers([1,2,3,2,1]) = 2
artificial_muscle_fibers([1,2,3,2,1,2,4,2,1]) = 2
Ссыылку на ваше решение на гитхабе введите в форму ниже:


Ваше решение

После нажатия на ОТПРАВИТЬ вы будете автоматически перенаправлены к следующему занятию!

Возможный алгоритм решения прошлой задачки

Применяем паттерн "структуры данных с эффективностью O(1)" (map/dict/словарь...). Сперва в один проход перебираем значения первого массива, используя каждое значение как ключ в словаре, и 1 как его значение в словаре (встретился один раз).

Затем проходим по элементам второго массива. Если текущее значение как ключ в словаре не найдено, или значение по этому ключу равно 0, возвращаем false, иначе уменьшаем значение по ключу на 1. Когда этот цикл закончится, возвращаем true.


Вывод
Активнее продумывайте схему, когда вычисления можно прервать непосредственно в процессе "промежуточного" перебора. Тут нередкая неточность, что второй цикл делают аналогично первому, учитывая все количества значений во втором массиве, и сравнивают содержимое двух словарей уже в третьем цикле.

 """

def artificial_muscle_fibers(arr):
    byte_array = bytearray(8192)
    duplicate_elements = 0
    for item in arr:
        bit_position = item -1
        byte_index = bit_position //8
        bit_index = bit_position % 8
        eight_bit_mask = 1 << bit_index
        if byte_array[byte_index] & eight_bit_mask:
            duplicate_byte_index = byte_index + 4000
            if not (byte_array[duplicate_byte_index] & eight_bit_mask):
                duplicate_elements +=1
                byte_array[duplicate_byte_index] |= eight_bit_mask
        else:
            byte_array[byte_index] |= eight_bit_mask
    return duplicate_elements

    
print(artificial_muscle_fibers([1,2,3,4,5])) # 0
print(artificial_muscle_fibers([1,2,3,2,1])) # 2
print(artificial_muscle_fibers([1,2,3,2,1,2,4,2,1])) # 2

def test_with_explanation(test_name, arr, expected):
    result = artificial_muscle_fibers(arr)
    status = "✅" if result == expected else "❌"
    print(f"{status} {test_name}: {arr}")
    print(f"   Ожидалось: {expected}, Получено: {result}")
    if result != expected:
        print(f"   ОШИБКА! Ожидалось {expected}, но получилось {result}")
    print()

print("=== Детальная проверка ===")
test_with_explanation("Все уникальные", [1, 2, 3, 4, 5], 0)
test_with_explanation("Два дубликата", [1, 2, 3, 2, 1], 2)
test_with_explanation("Многократные повторения", [1, 2, 3, 2, 1, 2, 4, 2, 1], 2)
test_with_explanation("Одно число много раз", [5, 5, 5, 5], 1)
test_with_explanation("Три разных дубликата", [1, 2, 3, 1, 2, 3], 3)
print("=== Базовые тесты ===")
print(f"[1, 2, 3, 4, 5] = {artificial_muscle_fibers([1, 2, 3, 4, 5])}")                    # 0
print(f"[1, 2, 3, 2, 1] = {artificial_muscle_fibers([1, 2, 3, 2, 1])}")                    # 2
print(f"[1, 2, 3, 2, 1, 2, 4, 2, 1] = {artificial_muscle_fibers([1, 2, 3, 2, 1, 2, 4, 2, 1])}")  # 2

print("\n=== Тесты с одним числом ===")
print(f"[5, 5, 5, 5] = {artificial_muscle_fibers([5, 5, 5, 5])}")                          # 1
print(f"[10] = {artificial_muscle_fibers([10])}")                                          # 0
print(f"[7, 7] = {artificial_muscle_fibers([7, 7])}")                                      # 1

print("\n=== Тесты с граничными значениями ===")
print(f"[1, 32000] = {artificial_muscle_fibers([1, 32000])}")                              # 0
print(f"[1, 1, 32000, 32000] = {artificial_muscle_fibers([1, 1, 32000, 32000])}")          # 2
print(f"[1, 2, 1, 32000, 32000] = {artificial_muscle_fibers([1, 2, 1, 32000, 32000])}")    # 2

print("\n=== Тесты с разным количеством повторений ===")
print(f"[1, 2, 3, 1, 2, 3, 1, 2, 1] = {artificial_muscle_fibers([1, 2, 3, 1, 2, 3, 1, 2, 1])}")  # 3
print(f"[1, 1, 1, 1, 2, 2, 3] = {artificial_muscle_fibers([1, 1, 1, 1, 2, 2, 3])}")        # 2

print("\n=== Тесты без дубликатов ===")
print(f"[] = {artificial_muscle_fibers([])}")                                              # 0
print(f"[1, 3, 5, 7, 9] = {artificial_muscle_fibers([1, 3, 5, 7, 9])}")                    # 0

print("\n=== Тесты с большими числами ===")
print(f"[100, 200, 300, 100, 400, 200] = {artificial_muscle_fibers([100, 200, 300, 100, 400, 200])}")  # 3

print("\n=== Сложные тесты ===")
print(f"[1, 2, 1, 3, 2, 4, 3, 5, 4] = {artificial_muscle_fibers([1, 2, 1, 3, 2, 4, 3, 5, 4])}")  # 4
print(f"[5, 5, 5, 5, 5, 5, 5, 5] = {artificial_muscle_fibers([5, 5, 5, 5, 5, 5, 5, 5])}")  # 1